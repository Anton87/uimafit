A simple example for testing the !RoomNumberAnnotator from the UIMA examples project

= Introduction =

UIMA comes with source code that supports the tutorial which is found [http://incubator.apache.org/uima/documentation.html here].  The the first example provides a simple analysis engine that finds room numbers for two buildings at IBM's Watson Research Center.  The analysis engine is located in the examples project at:

{{{
/uimaj-examples/src/org/apache/uima/tutorial/ex1/RoomNumberAnnotator.java
}}}

The following code provides a complete unit test that you might use to test this analysis engine:

{{{
@Test
public void testRoomNumberAnnotator() throws UIMAException, IOException {
	AnalysisEngine engine = AnalysisEngineFactory
			.createAnalysisEngineFromPath("descriptors/tutorial/ex1/RoomNumberAnnotator.xml");
	JCas jCas = AnalysisEngineFactory.process(engine, "data/WatsonConferenceRooms.txt");

	RoomNumber roomNumber;
	FSIterator roomNumbers = jCas.getAnnotationIndex(RoomNumber.type).iterator();
	for (int i = 0; roomNumbers.hasNext(); i++) {
		roomNumber = (RoomNumber) roomNumbers.next();
		if (i == 0) {
			assertEquals("20-001", roomNumber.getCoveredText());
			assertEquals("Yorktown", roomNumber.getBuilding());
		}
		else if (i == 1) {
			assertEquals("20-051", roomNumber.getCoveredText());
			assertEquals("Yorktown", roomNumber.getBuilding());
		}
		else if (i == 2) {
			assertEquals("2N-F28", roomNumber.getCoveredText());
			assertEquals("Hawthorne", roomNumber.getBuilding());
		}
	}
}

}}}

First an analysis engine is created by the !AnalysisEngineFactory and then a JCas is provided by the process method.  The process method creates a new JCas and runs the analysis engine provided by the text passed into the method.  That's it!  Now you can start testing the contents of the CAS.  

While you can always use the factory methods that end with "!FromPath" it is much preferred to create analysis engines and type system descriptions from their names or from their classes.  For example, instead of stuffing all of your types into a single type descriptor file (you wouldn't do this with Java classes) you should instead create one descriptor per type and put them in your source code side-by-side with the source code generated by JCasGen.  For example, if you create a type description in the uima examples project in the following location:

{{{
/uimaj-examples/src/org/apache/uima/tutorial/RoomNumber.xml
}}}

that contains the type system description for the type !RoomNumber, then you can test the analysis engine with code like the following:

{{{
@Test
public void testRoomNumberAnnotator2() throws UIMAException, IOException {
	TypeSystemDescription typeSystemDescription = TypeSystemDescriptionFactory.createTypeSystemDescription(RoomNumber.class);
	AnalysisEngine engine = AnalysisEngineFactory.createAnalysisEngine(RoomNumberAnnotator.class, typeSystemDescription);
	JCas jCas = AnalysisEngineFactory.process(engine, "data/WatsonConferenceRooms.txt");

	RoomNumber roomNumber = AnnotationRetrieval.get(jCas, RoomNumber.class, 0);
	assertEquals("20-001", roomNumber.getCoveredText());
	assertEquals("Yorktown", roomNumber.getBuilding());
}
}}}

The code above is nice because there is no dependence on specific file locations and no descriptors are needed other than for the type system types.  